<!DOCTYPE <!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Upload</title>
    <!-- <meta name="viewport" content="width=device-width, initial-scale=1"> -->
    <!-- <link rel="stylesheet" type="text/css" media="screen" href="main.css" /> -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <!-- <script src="main.js"></script> -->
    <style>
        body{
            padding-top: 20px;
            padding-bottom: 20px;
        }
        .jumbotron{
            margin-top: 10px;
        }
    </style>
</head>
<body>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

    <div class="container">
        <div class="">
            <%- include('partial/navbar')%>
            <div class="jumbotron">
                <h1 class="text-center">Upload</h1>
            </div>
        </div>
        <div class="">
            <div>

                <input id="myInput" type="file" webkitdirectory directory multiple/>
                
                <br>    
            </div>
        </div>
        <div class="row">
            <div class="container" id="log"> 
                
            </div>
        </div>
        <br>
        <div class="row">
            <%- include('partial/footer.ejs') %>
        </div>
    </div>
    <script>

        var folder = document.getElementById("myInput");

        folder.onchange=function(){

            var files = folder.files;
            console.log("files es: "),
            console.log(folder.files);

            uploadFiles (files).then(()=>{
                console.log("lazadas las promesas");
                //alert("OK");
                //window.location.href= "http://192.168.1.107:3082";

            }).catch((err)=>{
                console.log(err);
            })
        }


    function uploadFiles(files) {
        return new Promise ((resolve, reject)=>{
            var promises = [];
            var numFile = files.length;
            console.log("nยบ de files en uploadFiles");
            console.log(numFile);
            console.log("Antes del for: ");
            for (var i  = 0; i  < numFile; i++){           
                console.log("dentro del for antes del push");
                promises.push(uploadFile(files[i]));
                console.log("el fichero es en el for: ");
                // console.log(files[i]);
            }
            console.log("despues de for");
            Promise.all(promises).then (()=> {
                resolve();
            })
        });
    }

    function call(params) {
        
        $.ajax({
            type: "POST",
            url: "http://192.168.1.107:3083/post/upload",
            data: {data: JSON.stringify(params)},

            }).done((res) => {

                //result = res;
                console.log("ya subido", filename);
                console.log(res);
                resolve();
        
            }).fail((err) => {
                console.log(err)
            })
    }

    function uploadFile(fil) {
        return new Promise((resolve, reject) => {
            var file = fil;
            console.log ("file in uploadFile:-*/*-");

            if (file.type == "image/jpeg" || file.type == "image/jpg" || file.type == "image/png") {
                var filename = file.name;
                let fr = new FileReader();
                fr.onload = receivedBinary;
                fr.readAsBinaryString(file);

                function receivedBinary() {
                    console.log("filebinary");
                    showResult(fr, "Binary").then((filebinary) => {
                        console.log('then del showResult')
                        var params = { "filename": filename,
                                        "filebinary": filebinary};
                        call(params);
                    });
                }
            } else {
                console.log ("el fichero NOOOOO es  una imagen ");
            }
        })
    }
    

    function showResult(fr, label) {
        return new Promise((res, rej) => {
            var markup, result, n, aByte, byteStr;

            markup = [];
            markup1 = [];
            result = fr.result;
            for (n = 0; n < result.length; ++n) {
                aByte = result.charCodeAt(n);
                byteStr = aByte.toString(16); // 16 - the number will show as an hexadecimal value
                if (byteStr.length < 2) {
                    byteStr = "0" + byteStr;
                }
                markup.push(byteStr);
            }
            
            markup1 = markup.join(" ");
            
            bodyAppend("p", label + " (" + result.length + "):");
            bodyAppend("pre", markup.join(" "));

            res(markup1);
        });
    }

    function bodyAppend(tagName, innerHTML) {
        var elm;

        elm = document.createElement(tagName);
        elm.innerHTML = innerHTML;
        document.body.appendChild(elm);
    }

   
       
    </script>
</body>
</html>